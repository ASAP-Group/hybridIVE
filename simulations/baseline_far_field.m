clear * 
clc

%datapath = [path to dataset, generated by dataset_matlab/make_dataset.m];
datalisttest = readlines(strcat(datapath,"info/datalisttest.txt"));
nad_activity_files_path = "nad_activity/"; % extract content of nad_activity.tar here
trials = 300;

NFFT = 512;
SHIFT = 128;
N = 622; % #frames in each sample
d = 3; % #microphones
c = 340; % speed of sound
spacing = 0.03; % microphone spacings
fs = 16000;

k = permute(0:NFFT/2,[1 3 2]);
v = (2*pi*k/NFFT).*((0:d-1)')*spacing*fs/c; % vector "v" in far-field models

maxIt = 50;

selectedband = 2:NFFT/2-1; % exclude real-valued frequency bins 1 and NFFT/2


meth_num = 6; 
SIRimp = zeros(trials,meth_num);
SIR_BSSeval = zeros(trials,meth_num);
SDR_BSSeval = zeros(trials,meth_num);
STOI = zeros(trials,meth_num);


for trial = 1:trials
    data = load(strcat(strcat(datapath,"files/"),datalisttest(trial)));
    pilotname = char(strcat(nad_activity_files_path,datalisttest(trial)));
    pilotname = [pilotname(1:end-4) '_aux.mat'];
    pilot = load(pilotname);

    pilotoracle = 10*log10(mean(abs(data.x(1,:,:)-data.y(1,:,:)).^2, 3)./...
        mean(abs(data.y(1,:,:)).^2, 3)) > 10;
    
    outputs = zeros(meth_num, 80000);
    true_soi = zeros(meth_num, 80000);
    
    x = istft(permute(data.x(1,:,selectedband),[3 2 1]), SHIFT, NFFT, hamming(NFFT));
    s_true = istft(permute(data.y(1,:,selectedband),[3 2 1]), SHIFT, NFFT, hamming(NFFT));
    SIRin = real(mean(abs(data.y(1,:,selectedband)).^2,'all')./...
        mean(abs(data.x(1,:,selectedband)-data.y(1,:,selectedband)).^2,'all'));
    
    

    for method = 1:6
        OUT = zeros(1, N, NFFT/2+1);
        switch method
            case 1
                [w, a, shat, NumIt] = ipsive(data.x(:,:,selectedband), 0, maxIt, 'rati', ones(1,N), v(:,:,selectedband));
            case 2
                [w, a, shat, NumIt] = icaponive(data.x(:,:,selectedband), 0, maxIt, 'rati', ones(1,N), v(:,:,selectedband));
            case 3
                [w, a, shat, NumIt] = ipsive(data.x(:,:,selectedband), 0, maxIt, 'rati', 1./(pilot.aux+0.0001), v(:,:,selectedband));
            case 4
                [w, a, shat, NumIt] = icaponive(data.x(:,:,selectedband), 0, maxIt, 'rati', 1./(pilot.aux+0.0001), v(:,:,selectedband));
            case 5
                [w, a, shat, NumIt] = ipsive(data.x(:,:,selectedband), 0, maxIt, 'rati', 1./(pilotoracle+0.0001), v(:,:,selectedband));
            case 6
                [w, a, shat, NumIt] = icaponive(data.x(:,:,selectedband), 0, maxIt, 'rati', 1./(pilotoracle+0.0001), v(:,:,selectedband));
        end
        signal = pagemtimes(w,'ctranspose',data.y(:,:,selectedband),'none');
        interference = pagemtimes(w,'ctranspose',data.x(:,:,selectedband)-data.y(:,:,selectedband),'none');
        SIR = real(mean(abs(signal).^2,'all')./mean(abs(interference).^2,'all'));
        SIRimp(trial,method) = 10*log10(SIR)-10*log10(SIRin);
        
        OUT(1,:,selectedband) = shat;
        se = istft(permute(OUT,[3 2 1]), SHIFT, NFFT, hamming(NFFT));

        [SDR, SIR, SAR, perm] = bss_eval_sources([se; se],[s_true; x-s_true]);
        SIR_BSSeval(trial, method) = SIR(1);
        SDR_BSSeval(trial, method) = SDR(1);
        
        if sum(isnan(se)) == 0
            STOI(trial, method) = stoi(se, s_true, fs); % original STOI 
            % (in the article, we report extended STOI available in Python)
        end
        outputs(method, :) = se;
        true_soi(method, :) = s_true;
    end

    save(strcat(strcat(datapath,"structuredmodels_outputs/"),datalisttest(trial)), "true_soi", "outputs")

    fprintf('Trial number: %d/%d\n',trial,trials);
end

disp('SDR: PSIVE CaponIVE iPSIVE iCaponIVE oPSIVE oCaponIVE uFastIVE')
disp(mean(SDR_BSSeval,'omitnan'))
disp('SIR: PSIVE CaponIVE iPSIVE iCaponIVE oPSIVE oCaponIVE uFastIVE')
disp(mean(SIR_BSSeval,'omitnan'))
disp('STOI: PSIVE CaponIVE iPSIVE iCaponIVE oPSIVE oCaponIVE uFastIVE')
disp(mean(STOI,'omitnan'))
